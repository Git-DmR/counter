{"version":3,"sources":["components/counter/index.js","containers/counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","handleIncrement","handleDecrement","currentValue","onClick","CounterContainer","props","state","bind","this","setState","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAaeA,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,gBAAiBC,EAArC,EAAqCA,aAArC,OACd,gCACE,gCACE,iCAAS,iBACRA,KAEH,wBAAQC,QAASH,EAAjB,wBACA,wBAAQG,QAASF,EAAjB,4BC2BWG,E,kDAhCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXJ,aAAc,GAEhB,EAAKF,gBAAkB,EAAKA,gBAAgBO,KAArB,gBACvB,EAAKN,gBAAkB,EAAKA,gBAAgBM,KAArB,gBANN,E,mDASnB,WAAmB,IAAD,OAChBC,KAAKC,UAAS,SAACH,GAAD,MAAY,CACxBJ,aAAc,EAAKI,MAAMJ,aAAe,Q,6BAI5C,WAAmB,IAAD,OAChBM,KAAKC,UAAS,SAACH,GAAD,MAAY,CACxBJ,aAAc,EAAKI,MAAMJ,aAAe,Q,oBAI5C,WACE,OACE,cAAC,EAAD,CACEF,gBAAiBQ,KAAKR,gBACtBC,gBAAiBO,KAAKP,gBACtBC,aAAcM,KAAKF,MAAMJ,mB,GA3BFQ,IAAMC,W,MCQtBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e3f01d6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Counter = ({ handleIncrement, handleDecrement, currentValue }) => (\n  <div>\n    <div>\n      <strong>{\"Counter_ :  \"}</strong>\n      {currentValue}\n    </div>\n    <button onClick={handleIncrement}>Increment.</button>\n    <button onClick={handleDecrement}>Decrement.</button>\n  </div>\n);\n\nexport default Counter;\n","import React from \"react\";\nimport Counter from \"../components/counter/index.js\";\n\nclass CounterContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentValue: 0,\n    };\n    this.handleIncrement = this.handleIncrement.bind(this);\n    this.handleDecrement = this.handleDecrement.bind(this);\n  }\n\n  handleIncrement() {\n    this.setState((state) => ({\n      currentValue: this.state.currentValue + 1,\n    }));\n  }\n\n  handleDecrement() {\n    this.setState((state) => ({\n      currentValue: this.state.currentValue - 1,\n    }));\n  }\n\n  render() {\n    return (\n      <Counter\n        handleIncrement={this.handleIncrement}\n        handleDecrement={this.handleDecrement}\n        currentValue={this.state.currentValue}\n      />\n    );\n  }\n}\n\nexport default CounterContainer;\n","import CounterContainer from \"../src/containers/counter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CounterContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}